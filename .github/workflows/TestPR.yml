name: PR Test Workflow

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: mysql2://root:expertiza@127.0.0.1:3306/expertiza_test
      RAILS_ENV: test

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: expertiza
          MYSQL_DATABASE: expertiza_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.7
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-traditional
      - name: Install Ruby dependencies
        run: |
          gem update --system
          gem install bundler:2.4.7
          bundle install
      - name: Setup database
        run: |
          bundle exec rails db:create RAILS_ENV=test
          bundle exec rails db:schema:load RAILS_ENV=test
      - name: Run Tests
        id: run_tests
        continue-on-error: true  # Allow failure capturing
        run: |
          bundle exec rspec spec/models --format documentation > rspec_results.txt || true
          bundle exec rspec spec/requests --format documentation >> rspec_results.txt || true
      - name: Save PR number
        run: echo "${{ github.event.pull_request.number }}" > pr_number.txt
      - name: Extract Failed Tests
        if: always()  # Ensures this step runs regardless of test outcome
        run: |
          MODEL_FAILURES=$(grep -E "^rspec ./spec/models/" rspec_results.txt || true)
          REQUEST_FAILURES=$(grep -E "^rspec ./spec/requests/" rspec_results.txt || true)
          
          if [ -z "$MODEL_FAILURES" ] && [ -z "$REQUEST_FAILURES" ]; then
          echo "All tests passed." > failed_tests.txt
          else
          > failed_tests.txt  # Clear the file first
            if [ -n "$MODEL_FAILURES" ]; then
              echo "Failing Model Test Cases:" >> failed_tests.txt
              echo "$MODEL_FAILURES" >> failed_tests.txt
              echo "" >> failed_tests.txt
            fi
          
            if [ -n "$REQUEST_FAILURES" ]; then
              echo "Failing Controller Test Cases:" >> failed_tests.txt
              echo "$REQUEST_FAILURES" >> failed_tests.txt
              echo "" >> failed_tests.txt
            fi
          fi
          
          echo "FAILED_TESTS<<EOF" >> $GITHUB_ENV
          cat failed_tests.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: failed-tests
          path: |
            failed_tests.txt
            pr_number.txt
  
